<launch>
    <arg name="robot_name"  value="microbot_0" />
    <arg name="init_pose" value="-z 0.965" />
    
    <arg name="marker_size"          default="3.0" />
    <arg name="max_new_marker_error" default="0.05" />
    <arg name="max_track_error"      default="0.05" />
    <arg name="cam_image_topic"      default="/camera_0/image_raw" />
    <arg name="cam_info_topic"       default="/camera_0/camera_info" />
    <arg name="output_frame"         default="/camera_link" />
    <param name="/robot_description" command="$(find xacro)/xacro 
        '$(find microrobot)/description/actual_robot.xacro'" />

    <!-- Launch gazebo with custom world -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(find microrobot)/worlds/custom_empty.world"/>
        <arg name="paused" default="true" />
		<arg name="use_sim_time" default="true" />
		<arg name="gui" default="true" />
		<arg name="headless" default="false" />
		<arg name="debug" default="false" />
        <arg name="verbose" value="false"/>
        <arg name="physics" value="ode"/>
    </include>

    <!-- Spawn the robot model -->
    <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model"
        args="-param /robot_description -urdf $(arg init_pose) 
                -model $(arg robot_name) " />

    <!-- Loading Controllers -->
    <!-- Load joint controller configurations from YAML file to parameter server -->
    <rosparam file="$(find microrobot)/config/microbot_control.yaml" command="load"/>

    <!-- Load the controllers -->
    <node name="controller_spawner" pkg="controller_manager" type="spawner" 
        respawn="false" output="screen" ns="/microbot"
        args="
        left_joint_velocity_controller 
        right_joint_velocity_controller
        joint_state_controller"/>

    <!-- convert joint states to TF transforms for rviz, etc -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
        respawn="false" output="screen">
    </node>

    <!-- Autostart circles for simulation stability testing -->
    <!-- <node pkg="microrobot" type="test.py" name="sim_stability_testing"/> -->

    <!-- AR tracking package -->
    <node name="ar_track_alvar" pkg="ar_track_alvar" type="individualMarkersNoKinect" 
        respawn="false" output="screen">

        <param name="marker_size"           type="double" value="$(arg marker_size)" />
        <param name="max_new_marker_error"  type="double" value="$(arg max_new_marker_error)" />
        <param name="max_track_error"       type="double" value="$(arg max_track_error)" />
        <param name="output_frame"          type="string" value="$(arg output_frame)" />

        <remap from="camera_image"  to="$(arg cam_image_topic)" />
        <remap from="camera_info"   to="$(arg cam_info_topic)" />
    </node>

    <!-- Start visual odometry -->
    <node pkg="microrobot" type="visual_odometry.py" name="visual_odometry"/> 

    <!-- robot localization package-->
    <node pkg="robot_localization" type="ekf_localization_node" name="ekf_se" clear_params="true">
        <rosparam command="load" file="$(find microrobot)/config/ekf_template.yaml" /> 

        <!--  Placeholder for output topic remapping
        You either remap on this node, the node that takes in the data, or both!
        <remap from="accel/filtered" to=""/>
        -->
        <!-- <remap from="odometry/filtered" to="/odom"/> -->

    </node>
</launch>